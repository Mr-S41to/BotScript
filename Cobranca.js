const fs = require("fs");
const wppconnect = require("@wppconnect-team/wppconnect");

let atendimentos = {};

wppconnect
  .create({
    session: "sessionName",
    catchQR: (base64Qr, asciiQR) => {
      console.log(asciiQR); // Optional to log the QR in the terminal
      var matches = base64Qr.match(
        /^data:([A-Za-z-+\/]+);base64,(.+)$/
      ),
        response = {};

      if (matches.length !== 3) {
        return new Error("Invalid input string");
      }
      response.type = matches[1];
      response.data = new Buffer.from(matches[2], "base64");

      var imageBuffer = response;
      require("fs").writeFile(
        "out.png",
        imageBuffer["data"],
        "binary",
        function (err) {
          if (err != null) {
            console.log(err);
          }
        }
      );
    },
    logQR: false,
    useChrome: false,
    headless: true,
  })
  .then((client) => start(client))
  .catch((error) => console.log(error));

// Fun√ß√£o para esperar uma mensagem de um cliente especifico.
function waitForMessage(client, from) {
  return new Promise((resolve) => {
    client.onMessage((message) => {
      if (message.from === from) {
        resolve(message);
      }
    });
  });
}

function start(client) {
  client.onMessage(async (message) => {
    // Processa a mensagem do cliente
    if (!atendimentos[message.from]) {
      await client
        .sendText(
          message.from,
          "Ol√°, aqui √© a Luna, assistente de cobran√ßas do Grupo Saint Paul.\nEm que posso ajudar?\n\n1Ô∏è‚É£ - Para Boletos\n2Ô∏è‚É£ - Informa√ß√µes de IPTU\n3Ô∏è‚É£ - Relat√≥rios de Imposto de Renda\n4Ô∏è‚É£ - C√°lculos de Quita√ß√£o\n5Ô∏è‚É£ - Acordos de parcelas em atraso\n6Ô∏è‚É£ - Informa√ß√µes de atendimento\n7Ô∏è‚É£ - Outros Servi√ßos"
        )
        .then((result) => {
          console.log("Result: ", result); //return object successd
        })
        .catch((erro) => {
          console.error("Error when sending: ", erro); //return object error
        });
      console.log(atendimentos);
      atendimentos[message.from] = true;
    }
    if (message.body.toLowerCase() === "opcoes" || message.body.toLowerCase() === "op√ß√µes") {
      client
        .sendText(
          message.from,
          "Ol√°, aqui √© a Luna, assistente de cobran√ßas do Grupo Saint Paul.\n\n1Ô∏è‚É£ - Para Boletos\n2Ô∏è‚É£ - Informa√ß√µes de IPTU\n3Ô∏è‚É£ - Relat√≥rios de Imposto de Renda\n4Ô∏è‚É£ - C√°lculos de Quita√ß√£o\n5Ô∏è‚É£ - Acordos de parcelas em atraso\n6Ô∏è‚É£ - Informa√ß√µes de atendimento\n7Ô∏è‚É£ - Outros Servi√ßos"
        )
    }
    if (message.body) {
      let alternativa;
      switch (message.body) {
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
          alternativa = message.body;
          await client.sendText(
            message.from,
            "Por gentileza, *seu nome completo*?"
          );
          await waitForMessage(client, message.from);
          await client.sendText(message.from, "E o *seu CPF*?");
          await waitForMessage(client, message.from);
          await client.sendText(
            message.from,
            "Por favor, em uma mensagem me envie os dados da sua *(quadra, lote e residencial)*?\n\n*Ex: Q.XX, L.XX, Grand Trianon*"
          );
          await waitForMessage(client, message.from);
          if (alternativa === "1") {
            await client.sendText(
              message.from,
              "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o de *Boletos* üìÑ ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
            );
          }
          if (alternativa === "2") {
            await client.sendText(
              message.from,
              "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o de *Informa√ß√µes de IPTU* üßæ ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
            );
          }
          if (alternativa === "3") {
            await client.sendText(
              message.from,
              "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o de *Relat√≥rios de Imposto de Renda* ü¶Å ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
            );
          }
          if (alternativa === "4") {
            await client.sendText(
              message.from,
              "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o de *C√°lculos de Quita√ß√£o* üìä ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
            );
          }
          if (alternativa === "5") {
            await client.sendText(
              message.from,
              "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o de *Acordos de parcelas em atraso* ü§ù ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
            );
          }
          setTimeout(() => {
            delete atendimentos[message.from];
            console.log(
              `Usu√°rio ${message.from} removido ap√≥s 2.5 horas.`
            );
          }, 2.5 * 60 * 60 * 1000);
          console.log(atendimentos);
          break;
        case "6":
          await client.sendText(
            message.from,
            "*Departamento Comercial*:\nüìß *E-Mail*: comercial@gruposaintpaul.com.br\nüì± *WhatsApp*: 62 99226-7385\n\n*Departamento de Vendas*:\nüìß *E-Mail*: vendas@gruposaintpaul.com.br\nüì± *WhatsApp*: 62 99347-383\n\n*Aluguel*:\nüìß *E-Mail*: cobranca@gruposaintpaul.com.br\nüì± *WhatsApp*: 62 99948-7288"
          );
          await client.sendText(
            message.from,
            "Se precisar de mais algum atendimento √© s√≥ chamar."
          );
          delete atendimentos[message.from];
          break;
        case "7":
          await client.sendText(
            message.from,
            "Por gentileza, informe a solicita√ß√£o que deseja fazer para prosseguirmos com o atendimento?"
          );
          await waitForMessage(client, message.from);
          await client.sendText(message.from, "Por gentileza, *seu nome completo*?");
          await waitForMessage(client, message.from);
          await client.sendText(message.from, "E o *seu CPF*?");
          await waitForMessage(client, message.from);
          await client.sendText(
            message.from,
            "Por favor, em uma mensagem me envie os dados da sua unidade *(quadra, lote e residencial)*?\n\n*Ex: Q.XX, L.XX, Grand Trianon*"
          );
          await waitForMessage(client, message.from);
          await client.sendText(
            message.from,
            "Pronto! Agora √© s√≥ aguardar que em breve sua solicita√ß√£o ser√° atendida.\n\nCaso precise de de ajuda com outros assuntos, descreva a sua solicita√ß√£o abaixou ou digite *Op√ß√µes* para iniciar outro atendimento. üòâ"
          );
          setTimeout(() => {
            delete atendimentos[message.from];
          }, 2.5 * 60 * 60 * 1000);
          break;
        default:
          break;
      }
    } else {
      console.log("N√£o h√° mensagens de texto.")
    }
  });
}